/**
* Memory of 64 registers, each 16-bit wide.
*		Read:  out(t) = RAM64[address(t)](t)
*		Write: If load(t-1) then RAM64[address(t-1)](t) = in(t-1)
* If load == 1, the value is loaded into memory location
* specified by by address. This value becomes available through
* the out of output starting from next time step.
*/

CHIP RAM64 {
		IN in[16], load, address[6];
		OUT out[16];

		PARTS:

		DMux8Way(in=in, sel=address[0..2],  a=loada, b=loadb, c=loadc, d=loadd,
																				e=loade, f=loadf, g=loadg, h=loadh);

		RAM8(in=in, load=loada, adress=address[3..5], out=outa);
		RAM8(in=in, load=loadb, adress=address[3..5], out=outb);
		RAM8(in=in, load=loadc, adress=address[3..5], out=outc);
		RAM8(in=in, load=loadd, adress=address[3..5], out=outd);
		RAM8(in=in, load=loade, adress=address[3..5], out=oute);
		RAM8(in=in, load=loadf, adress=address[3..5], out=outf);
		RAM8(in=in, load=loadg, adress=address[3..5], out=outg);
		RAM8(in=in, load=loadh, adress=address[3..5], out=outh);

		Mux8Way16(a=outa, b=outb, c=outc, d=outd, e=oute, f=outf, g=outg, h=outh, sel=address[0..2], out=out);
}
